#!/usr/bin/env bash

# Function to generate SSH key
mt_task_generate_ssh_key () {
    tw_log "Generating SSH key..."

    tw_execute ssh-keygen \
               -t rsa \
               -b 4096 \
               -C "team.terminal@gmail.com"
    tw_handle_last_command_status "${?}" \
                                  "SSH Key generated" \
                                  "There was an error generating an SSH key!"

    tw_execute_eval "cat ~/.ssh/id_rsa.pub | pbcopy"
    tw_handle_last_command_status "${?}" \
                                  "The newly generated SSH key has been copied to clipboard" \
                                  "There was an error copying the newly generated SSH key to clipboard!"
}

# Function to install NPM packages
mt_task_install_npm_packages () {
    tw_log "Installing global NPM packages..."
    tw_execute sudo npm install -g \
               lite-server \
               nano-server \
               myterminal-cli \
               stay-with-me \
               git-getter \
               re-write

    tw_handle_last_command_status "${?}" \
                                  "Global NPM packages installed" \
                                  "There was an error installing NPM packages globally!"
}

# Function to create custom Lisp parser
mt_task_create_lisp_parser () {
    # TODO: Fix for macOS
    tw_log "Creating custom Lisp parser..."

    tw_execute sudo cp ~/.assets/cl /usr/bin/cl

    tw_handle_last_command_status "${?}" \
                                  "Custom Lisp parser created" \
                                  "There was an error creating Custom Lisp parser!"
}

# Function to setup quicklisp
mt_task_setup_quicklisp () {
    tw_log "Setting up quicklisp..."

    tw_execute curl https://beta.quicklisp.org/quicklisp.lisp -o /tmp/quicklisp.lisp
    tw_execute sbcl --load /tmp/quicklisp.lisp --non-interactive --eval "(quicklisp-quickstart:install)"
    tw_execute sbcl --load ~/quicklisp/setup.lisp --non-interactive --eval "(ql:add-to-init-file)"

    tw_handle_last_command_status "${?}" \
                                  "quicklisp installed" \
                                  "There was an error setting up quicklisp!"
}

# Function to create required directories
mt_task_create_required_directories () {
    tw_log "Creating required directories..."

    tw_execute mkdir "${MT_PATH_WORKSPACE}"
    tw_execute mkdir "${MT_PATH_WORKSPACE_GITHUB}"

    tw_execute mkdir "${MT_PATH_STORE}"

    tw_handle_last_command_status "${?}" \
                                  "Directories created" \
                                  "There was an error creating one or more directories!"
}

# Function to clone GitHub projects under 'myTerminal'
mt_task_clone_github_source_projects () {
    tw_log "Cloning GitHub source projects..."

    tw_execute git-getter \
               --username myTerminal \
               --targetPath "${MT_PATH_WORKSPACE_GITHUB}" \
               --ssh

    tw_handle_last_command_status "${?}" \
                                  "GitHub source projects cloned" \
                                  "There was an error cloning GitHub source projects!"
}

# Function to create a fallback link to ~/.config/emacs
mt_task_create_fallback_link_to_emacs_xdg () {
    tw_log "Creating a fallback link ~/.emacs.d -> ~/.config/emacs"

    tw_execute ln -s ~/.config/emacs ~/.emacs.d

    tw_handle_last_command_status "${?}" \
                                  "Fallback link created" \
                                  "There was an error creating the fallback link!"
}


# Function to link myTerminal/.emacs.d to dotfiles
mt_task_link_default_emacs_configs () {
    tw_log "Linking myTerminal/.emacs.d to dotfiles"

    tw_execute mkdir ~/.config/emacs/configs
    tw_execute ln -s "${MT_PATH_WORKSPACE_GITHUB}/.emacs.d/emacs" ~/.config/emacs/configs/_default

    tw_handle_last_command_status "${?}" \
                                  "Default Emacs configs linked" \
                                  "There was an error linking default Emacs configs!"
}

# Function to convert dotfiles to SSH
mt_task_convert_dotfiles_to_ssh () {
    tw_log "Converting ~/.git to an SSH based clone..."

    tw_execute rm -rf ~/.git
    tw_execute cp -r "${MT_PATH_WORKSPACE_GITHUB}/dotfiles/.git" ~/.git

    tw_handle_last_command_status "${?}" \
                                  "Repository converted" \
                                  "There was an error converting repository!"
}

# Function to create convenience soft-links
mt_task_link_create_convenience_softlinks () {
    tw_log "Creating convenience soft-links"

    tw_execute ln -s "${MT_PATH_WORKSPACE}/kitchen" ~/_kitchen
    tw_execute ln -s "${MT_PATH_WORKSPACE_GITHUB}" ~/_github
    tw_execute ln -s "${MT_PATH_WORKSPACE_GITHUB}/myTerminal.github.io" ~/_portfolio-data
    tw_execute ln -s "${MT_PATH_WORKSPACE}/all/myterminal-web-lp" ~/_portfolio-lp

    tw_execute ln -s "${MT_PATH_STORE}/Documents" ~/_documents
    tw_execute ln -s "${MT_PATH_STORE}/Documents/notes" ~/_notes
    tw_execute ln -s "${MT_PATH_STORE}/Mobile-Media" ~/_mobile-media
    tw_execute ln -s "${MT_PATH_STORE}/YouTube" ~/_youtube

    tw_handle_last_command_status "${?}" \
                                  "Links created" \
                                  "There was an error creating one or more links!"
}

# Function to regenerate symbolic links for binaries
mt_task_regenerate_symlinks_for_binaries () {
    tw_log "Creating symlinks for binaries"

    tw_execute ~/.setup/regenerate-binary-symlinks

    tw_handle_last_command_status "${?}" \
                                  "Links created" \
                                  "There was an error creating one or more links!"
}

# Function to tag machine as configured
mt_task_tag_machine_as_configured () {
    tw_log "Tagging machine with ~/.mt-tag"

    tw_execute touch ~/.mt-tag
}
